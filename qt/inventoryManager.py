# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'inventoryManager.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import QSize
import Inventory, EquipSubInventory, UseSubInventory, EtcSubInventory
import alertBox


grey_background = "background-color: rgb(245, 245, 245);"
white_background = "background-color: rgb(255, 255, 255);"

ADD_INVENTORY_BUTTON = -2
VIEW_INVENTORY_BUTTON = -3
UPDATE_INVENTORY_BUTTON = -4
DELETE_INVENTORY_BUTTON = -5
ADD_SUBINVENTORY_BUTTON = -6
VIEW_SUBINVENTORY_BUTTON = -7
UPDATE_SUBINVENTORY_BUTTON = -8
DELETE_SUBINVENTORY_BUTTON = -9

class Ui_inventoryManager(object):
    def setupUi(self, inventoryManager):
        inventoryManager.setObjectName("inventoryManager")
        inventoryManager.resize(640, 368)
        inventoryManager.setMinimumSize(QtCore.QSize(640, 368))
        inventoryManager.setMaximumSize(QtCore.QSize(640, 368))
        icon = QIcon()
        icon.addFile(u"images\maplestoryIcon.ico", QSize(), QIcon.Normal, QIcon.Off)
        inventoryManager.setWindowIcon(icon)
        inventoryManager.setStyleSheet(white_background)

        self.characterID = QtWidgets.QLineEdit(inventoryManager)
        self.characterID.setGeometry(QtCore.QRect(20, 80, 113, 20))
        self.characterID.setText("")
        self.characterID.setObjectName("characterID")

        self.inventoryId = QtWidgets.QLineEdit(inventoryManager)
        self.inventoryId.setGeometry(QtCore.QRect(20, 120, 113, 20))
        self.inventoryId.setText("")
        self.inventoryId.setObjectName("inventoryId")

        self.mesos = QtWidgets.QLineEdit(inventoryManager)
        self.mesos.setGeometry(QtCore.QRect(20, 160, 113, 20))
        self.mesos.setText("")
        self.mesos.setObjectName("mesos")

        self.nx = QtWidgets.QLineEdit(inventoryManager)
        self.nx.setGeometry(QtCore.QRect(20, 200, 113, 20))
        self.nx.setText("")
        self.nx.setObjectName("nx")

        self.chosenSubInventory = QtWidgets.QComboBox(inventoryManager)
        self.chosenSubInventory.setGeometry(QtCore.QRect(170, 80, 111, 22))
        self.chosenSubInventory.setStyleSheet("background-color: rgb(245, 245, 245);")
        self.chosenSubInventory.setObjectName("chosenSubInventory")
        self.chosenSubInventory.addItem("")
        self.chosenSubInventory.addItem("")
        self.chosenSubInventory.addItem("")

        self.inventoryForeignID = QtWidgets.QLineEdit(inventoryManager)
        self.inventoryForeignID.setGeometry(QtCore.QRect(170, 120, 113, 20))
        self.inventoryForeignID.setText("")
        self.inventoryForeignID.setObjectName("inventoryForeignID")

        self.subinventoryID = QtWidgets.QLineEdit(inventoryManager)
        self.subinventoryID.setGeometry(QtCore.QRect(170, 160, 113, 20))
        self.subinventoryID.setText("")
        self.subinventoryID.setObjectName("subinventoryID")

        self.itemID = QtWidgets.QLineEdit(inventoryManager)
        self.itemID.setGeometry(QtCore.QRect(170, 200, 113, 20))
        self.itemID.setText("")
        self.itemID.setObjectName("itemID")

        self.quantity = QtWidgets.QLineEdit(inventoryManager)
        self.quantity.setGeometry(QtCore.QRect(170, 240, 113, 20))
        self.quantity.setObjectName("quantity")

        self.rarity = QtWidgets.QLineEdit(inventoryManager)
        self.rarity.setGeometry(QtCore.QRect(170, 280, 113, 20))
        self.rarity.setObjectName("rarity")

        self.okButton = QtWidgets.QPushButton(inventoryManager)
        self.okButton.setGeometry(QtCore.QRect(20, 320, 261, 31))
        self.okButton.setStyleSheet(grey_background)
        self.okButton.setObjectName("okButton")
        self.okButton.clicked.connect(lambda: self.parseInformation())

        self.inventoryLabel = QtWidgets.QLabel(inventoryManager)
        self.inventoryLabel.setGeometry(QtCore.QRect(20, 10, 111, 16))
        self.inventoryLabel.setObjectName("inventoryLabel")

        self.createInventoryRadioButton = QtWidgets.QRadioButton(inventoryManager)
        self.createInventoryRadioButton.setGeometry(QtCore.QRect(20, 30, 41, 17))
        self.createInventoryRadioButton.setObjectName("createInventoryRadioButton")

        self.readInventoryRadioButton = QtWidgets.QRadioButton(inventoryManager)
        self.readInventoryRadioButton.setGeometry(QtCore.QRect(20, 50, 41, 17))
        self.readInventoryRadioButton.setObjectName("readInventoryRadioButton")

        self.updateInventoryRadioButton = QtWidgets.QRadioButton(inventoryManager)
        self.updateInventoryRadioButton.setGeometry(QtCore.QRect(80, 30, 61, 17))
        self.updateInventoryRadioButton.setObjectName("updateInventoryRadioButton")

        self.deleteInventoryRadioButton = QtWidgets.QRadioButton(inventoryManager)
        self.deleteInventoryRadioButton.setGeometry(QtCore.QRect(80, 50, 51, 17))
        self.deleteInventoryRadioButton.setObjectName("deleteInventoryRadioButton")

        self.subinventoryLabel = QtWidgets.QLabel(inventoryManager)
        self.subinventoryLabel.setGeometry(QtCore.QRect(170, 10, 111, 16))
        self.subinventoryLabel.setObjectName("subinventoryLabel")

        self.createSubinventoryRadioButton = QtWidgets.QRadioButton(inventoryManager)
        self.createSubinventoryRadioButton.setGeometry(QtCore.QRect(170, 30, 41, 17))
        self.createSubinventoryRadioButton.setObjectName("createSubinventoryRadioButton")

        self.readSubinventoryRadioButton = QtWidgets.QRadioButton(inventoryManager)
        self.readSubinventoryRadioButton.setGeometry(QtCore.QRect(170, 50, 41, 17))
        self.readSubinventoryRadioButton.setObjectName("readSubinventoryRadioButton")

        self.updateSubinventoryRadioButton = QtWidgets.QRadioButton(inventoryManager)
        self.updateSubinventoryRadioButton.setGeometry(QtCore.QRect(230, 30, 61, 17))
        self.updateSubinventoryRadioButton.setObjectName("updateSubinventoryRadioButton")

        self.deleteSubinventoryRadioButton = QtWidgets.QRadioButton(inventoryManager)
        self.deleteSubinventoryRadioButton.setGeometry(QtCore.QRect(230, 50, 51, 17))
        self.deleteSubinventoryRadioButton.setObjectName("deleteSubinventoryRadioButton")

        self.buttonGroup = QtWidgets.QButtonGroup()
        self.buttonGroup.addButton(self.createInventoryRadioButton)
        self.buttonGroup.addButton(self.readInventoryRadioButton)
        self.buttonGroup.addButton(self.updateInventoryRadioButton)
        self.buttonGroup.addButton(self.deleteInventoryRadioButton)
        self.buttonGroup.addButton(self.createSubinventoryRadioButton)
        self.buttonGroup.addButton(self.readSubinventoryRadioButton)
        self.buttonGroup.addButton(self.updateSubinventoryRadioButton)
        self.buttonGroup.addButton(self.deleteSubinventoryRadioButton)

        self.output = QtWidgets.QTableWidget(inventoryManager)
        self.output.setGeometry(QtCore.QRect(320, 10, 301, 341))
        self.output.setObjectName("output")

        self.retranslateUi(inventoryManager)
        QtCore.QMetaObject.connectSlotsByName(inventoryManager)

    def retranslateUi(self, inventoryManager):
        _translate = QtCore.QCoreApplication.translate
        inventoryManager.setWindowTitle(_translate("inventoryManager", "Maplestory Manager - Inventory"))
        self.chosenSubInventory.setItemText(0, _translate("inventoryManager", "Equip"))
        self.chosenSubInventory.setItemText(1, _translate("inventoryManager", "Use"))
        self.chosenSubInventory.setItemText(2, _translate("inventoryManager", "Etc"))
        self.inventoryId.setPlaceholderText(_translate("inventoryManager", "Inventory ID"))
        self.readInventoryRadioButton.setText(_translate("inventoryManager", "View"))
        self.characterID.setPlaceholderText(_translate("inventoryManager", "Character Name"))
        self.subinventoryID.setPlaceholderText(_translate("inventoryManager", "SubInventory ID"))
        self.createInventoryRadioButton.setText(_translate("inventoryManager", "Add"))
        self.inventoryForeignID.setPlaceholderText(_translate("inventoryManager", "Parent Inventory (ID)"))
        self.nx.setPlaceholderText(_translate("inventoryManager", "NX"))
        self.okButton.setText(_translate("inventoryManager", "OK"))
        self.updateInventoryRadioButton.setText(_translate("inventoryManager", "Update"))
        self.itemID.setPlaceholderText(_translate("inventoryManager", "Item (ID)"))
        self.deleteInventoryRadioButton.setText(_translate("inventoryManager", "Delete"))
        self.inventoryLabel.setText(_translate("inventoryManager", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">Inventory</span></p></body></html>"))
        self.subinventoryLabel.setText(_translate("inventoryManager", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">Subinventory</span></p></body></html>"))
        self.deleteSubinventoryRadioButton.setText(_translate("inventoryManager", "Delete"))
        self.readSubinventoryRadioButton.setText(_translate("inventoryManager", "View"))
        self.updateSubinventoryRadioButton.setText(_translate("inventoryManager", "Update"))
        self.createSubinventoryRadioButton.setText(_translate("inventoryManager", "Add"))
        self.mesos.setPlaceholderText(_translate("inventoryManager", "Mesos"))
        self.quantity.setPlaceholderText(_translate("inventoryManager", "Quantity"))
        self.rarity.setPlaceholderText(_translate("inventoryManager", "Rarity (EQUIP ONLY)"))

    def parseInformation(self):
        action = self.buttonGroup.checkedId()

        if (action <= ADD_SUBINVENTORY_BUTTON): #Subinventory
            choiceDict = {
                "Equip": 0,
                "Use": 1,
                "Etc": 2
            }

            tempChosenSubInventory = choiceDict[self.chosenSubInventory.currentText()]
            referenceList = [EquipSubInventory, UseSubInventory, EtcSubInventory]
            subInventory = referenceList[tempChosenSubInventory]

            if (tempChosenSubInventory == 0):
                self.output.setColumnCount(5)
                column1 = QtWidgets.QTableWidgetItem()
                self.output.setHorizontalHeaderItem(0, column1)
                column2 = QtWidgets.QTableWidgetItem()
                self.output.setHorizontalHeaderItem(1, column2)
                column3 = QtWidgets.QTableWidgetItem()
                self.output.setHorizontalHeaderItem(2, column3)
                column4 = QtWidgets.QTableWidgetItem()
                self.output.setHorizontalHeaderItem(3, column4)
                column5 = QtWidgets.QTableWidgetItem()
                self.output.setHorizontalHeaderItem(4, column5)
                column1 = self.output.horizontalHeaderItem(0)
                column1.setText(QtCore.QCoreApplication.translate("inventoryManager", "idEquipSubInventory"))
                column2 = self.output.horizontalHeaderItem(1)
                column2.setText(QtCore.QCoreApplication.translate("inventoryManager", "idParentInventory"))
                column3 = self.output.horizontalHeaderItem(2)
                column3.setText(QtCore.QCoreApplication.translate("inventoryManager", "idEquip"))
                column4 = self.output.horizontalHeaderItem(3)
                column4.setText(QtCore.QCoreApplication.translate("inventoryManager", "equipQuantity"))
                column5 = self.output.horizontalHeaderItem(4)
                column5.setText(QtCore.QCoreApplication.translate("inventoryManager", "equipRarity"))

            else:
                self.output.setColumnCount(4)
                column1 = QtWidgets.QTableWidgetItem()
                self.output.setHorizontalHeaderItem(0, column1)
                column2 = QtWidgets.QTableWidgetItem()
                self.output.setHorizontalHeaderItem(1, column2)
                column3 = QtWidgets.QTableWidgetItem()
                self.output.setHorizontalHeaderItem(2, column3)
                column4 = QtWidgets.QTableWidgetItem()
                self.output.setHorizontalHeaderItem(3, column4)
                column1 = self.output.horizontalHeaderItem(0)
                column1.setText(QtCore.QCoreApplication.translate("inventoryManager", "id" + self.chosenSubInventory.currentText() +"SubInventory"))
                column2 = self.output.horizontalHeaderItem(1)
                column2.setText(QtCore.QCoreApplication.translate("inventoryManager", "idParentInventory"))
                column3 = self.output.horizontalHeaderItem(2)
                column3.setText(QtCore.QCoreApplication.translate("inventoryManager", "id" + self.chosenSubInventory.currentText()))
                column4 = self.output.horizontalHeaderItem(3)
                column4.setText(QtCore.QCoreApplication.translate("inventoryManager", self.chosenSubInventory.currentText() + "Quantity"))

            tempParentInventoryID = self.inventoryForeignID.text()
            tempSubInventoryID = self.subinventoryID.text()
            tempItemID = self.itemID.text()
            tempQuantity = self.quantity.text()
            tempRarity = self.rarity.text()
            
            try:
                if (action == ADD_SUBINVENTORY_BUTTON):
                    if (tempChosenSubInventory == 0):
                        subInventory.insert(tempSubInventoryID, tempParentInventoryID, tempItemID, tempQuantity, tempRarity)
                    else:
                        subInventory.insert(tempSubInventoryID, tempParentInventoryID, tempItemID, tempQuantity)

                elif (action == VIEW_SUBINVENTORY_BUTTON):
                    if (not tempParentInventoryID and not tempSubInventoryID and not tempItemID and not tempQuantity):
                        result = subInventory.selectAll()
                    else:
                        result = subInventory.select(tempSubInventoryID)
                        result = [result]
                    self.output.setRowCount(len(result))
                    if (tempChosenSubInventory == 0):
                        for i in range(len(result)):
                            for j in range(0,5):
                                self.output.setItem(i, j, QtWidgets.QTableWidgetItem(str(result[i][j])))
                    else:
                        for i in range(len(result)):
                            for j in range(0,4):
                                self.output.setItem(i, j, QtWidgets.QTableWidgetItem(str(result[i][j])))

                elif (action == UPDATE_SUBINVENTORY_BUTTON):
                    if (tempChosenSubInventory == 0):
                        subInventory.update(tempSubInventoryID, tempItemID ,tempQuantity, tempRarity)
                    else:
                        subInventory.update(tempSubInventoryID, tempItemID, tempQuantity)

                elif (action == DELETE_SUBINVENTORY_BUTTON):
                    subInventory.delete(tempSubInventoryID)

            except Exception as e:
                if (type(e) != TypeError):
                    alertBox.AlertBox(e)

        elif (action >= DELETE_INVENTORY_BUTTON): #Inventory

            self.output.setColumnCount(3)
            column1 = QtWidgets.QTableWidgetItem()
            self.output.setHorizontalHeaderItem(0, column1)
            column2 = QtWidgets.QTableWidgetItem()
            self.output.setHorizontalHeaderItem(1, column2)
            column3 = QtWidgets.QTableWidgetItem()
            self.output.setHorizontalHeaderItem(2, column3)
            column1 = self.output.horizontalHeaderItem(0)
            column1.setText(QtCore.QCoreApplication.translate("inventoryManager", "Inventory ID"))
            column2 = self.output.horizontalHeaderItem(1)
            column2.setText(QtCore.QCoreApplication.translate("inventoryManager", "Mesos"))
            column3 = self.output.horizontalHeaderItem(2)
            column3.setText(QtCore.QCoreApplication.translate("inventoryManager", "NX"))


            tempCharacterID = self.characterID.text()
            tempInventoryID = self.inventoryId.text()
            tempMesos = self.mesos.text()
            tempNX = self.nx.text()

            try:
                if (action == ADD_INVENTORY_BUTTON):
                    Inventory.insert(tempCharacterID, tempInventoryID, tempMesos, tempNX)

                elif (action == VIEW_INVENTORY_BUTTON):
                    if (not tempCharacterID and not tempInventoryID and not tempMesos and not tempNX):
                        result = Inventory.selectAll()
                    else:
                        result = Inventory.select(tempInventoryID)
                        result = [result]
                    self.output.setRowCount(len(result))
                    for i in range(len(result)):
                            for j in range(0,3):
                                self.output.setItem(i, j, QtWidgets.QTableWidgetItem(str(result[i][j])))

            
                elif (action == UPDATE_INVENTORY_BUTTON):
                    Inventory.update(tempInventoryID, tempMesos, tempNX)

                else:
                    Inventory.delete(tempInventoryID)

            except Exception as e:
                if (type(e) != TypeError):
                    alertBox.AlertBox(e)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    inventoryManager = QtWidgets.QWidget()
    ui = Ui_inventoryManager()
    ui.setupUi(inventoryManager)
    inventoryManager.show()
    sys.exit(app.exec_())
